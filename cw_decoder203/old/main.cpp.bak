//
//	CW Decoder Ver 1.0
//
//  2024.08.12 New Create
//
#include <stdio.h>
#include <stdlib.h> 
#include <math.h>
#include "goertzel.h"
#include "ch32v003fun.h"

#define micros() (SysTick->CNT / DELAY_US_TIME)
#define millis() (SysTick->CNT / DELAY_MS_TIME)

// what type of OLED - uncomment just one
//#define SSD1306_64X32
//#define SSD1306_128X32
#define SSD1306_128X64

//#define GPIO_ADC_MUX_DELAY 100
//#define GPIO_ADC_sampletime GPIO_ADC_sampletime_43cy
#include "ch32v003_GPIO_branchless.h"
#include "ssd1306_spi.h"
#include "ssd1306.h"

//#define LED_PIN GPIOv_from_PORT_PIN(GPIO_port_D, 5)
#define SW1_PIN GPIOv_from_PORT_PIN(GPIO_port_D, 0)
#define SW2_PIN GPIOv_from_PORT_PIN(GPIO_port_D, 4)
#define SW3_PIN GPIOv_from_PORT_PIN(GPIO_port_C, 0)
#define ADC_PIN GPIOv_from_PORT_PIN(GPIO_port_D, 3)
#define SPK_PIN GPIOv_from_PORT_PIN(GPIO_port_D, 2)
#define LED_PIN GPIOv_from_PORT_PIN(GPIO_port_D, 5)


#define SAMPLES 48 // 
#define SAMPLING_FREQUENCY 8000

uint16_t sampling_period_us;
//uint8_t morseData[SAMPLES];
int16_t morseData[SAMPLES];
//int8_t vImag[SAMPLES];

// function prototype (declaration), definition in "ch32v003fun.c"
extern "C" int mini_snprintf(char* buffer, unsigned int buffer_len, const char *fmt, ...);
//char title1[] = "FrequencyCounter";
char title1[]   = "   CW Decoder   ";
char title2[]   = "   Version 1.1  ";
uint16_t magnitudelimit = 100;
uint16_t magnitudelimit_low = 100;
uint16_t magnitude;
uint16_t realstate = low;
uint16_t realstatebefore = low;
uint16_t filteredstate = low;
uint16_t filteredstatebefore = low;
uint32_t starttimehigh;
uint32_t highduration;
uint32_t lasthighduration;
uint32_t hightimesavg;
uint32_t lowtimesavg;
uint32_t startttimelow;
uint32_t lowduration;
uint32_t laststarttime = 0;
uint16_t nbtime = 6;  /// ms noise blanker         

char code[20];
uint16_t stop = low;
uint16_t wpm;

void setup()
{
    // 各GPIOの有効化
    GPIO_port_enable(GPIO_port_D);
    GPIO_port_enable(GPIO_port_C);
    // 各ピンの設定
    GPIO_pinMode(SW1_PIN, GPIO_pinMode_I_pullDown, GPIO_Speed_10MHz); /// GPIO_Speed_In? @see https://github.com/cnlohr/ch32v003fun/blob/master/examples/GPIO/GPIO.c#L55
    GPIO_pinMode(SW2_PIN, GPIO_pinMode_I_pullDown, GPIO_Speed_10MHz);
    GPIO_pinMode(SW3_PIN, GPIO_pinMode_I_pullDown, GPIO_Speed_10MHz);
    GPIO_pinMode(ADC_PIN, GPIO_pinMode_I_analog, GPIO_Speed_10MHz);
//    GPIO_pinMode(LED_PIN, GPIO_pinMode_O_pushPull, GPIO_Speed_10MHz);
//	GPIO_digitalWrite(LED_PIN, low);
	ssd1306_spi_init();		// i2c Setup
	ssd1306_init();			// SSD1306 Setup
	ssd1306_setbuf(0);		// Clear Screen
	ssd1306_drawstr_sz(0, 24, title1, 1, fontsize_8x8);
	ssd1306_drawstr_sz(0, 40, title2, 1, fontsize_8x8);
	ssd1306_refresh();
	GPIO_ADCinit();
	initGoertzel();
	sampling_period_us = 1000000 / SAMPLING_FREQUENCY;
}

int main()
{
	char buf[16];
	uint16_t magnitude;
	SystemInit();			// ch32v003 sETUP
	setup();				// gpio Setup;
	Delay_Ms( 2000 );
	printf("Start CW Decoder Version 1.0\n");
	ssd1306_setbuf(0);	// Clear Screen
	ssd1306_refresh();
	while(1) {
		while(1) {
		for (int i = 0; i < SAMPLES; i++) {
			uint32_t t = micros();
			morseData[i] = GPIO_analogRead(GPIO_Ain4_D3);
			while ((micros() - t) < sampling_period_us);
		}
		
		magnitude = (uint16_t)goertzel(morseData, SAMPLES);
		printf("%8lu : mag = %d\n", micros(), magnitude);
		};
	}
}
